{
    "information_for_contributors": [
        "This file has been converted from https://github.com/Microsoft/TypeScript-TmLanguage/blob/master/TypeScriptReact.tmLanguage",
        "If you want to provide a fix or improvement, please create a pull request against the original repository.",
        "Once accepted there, we are happy to receive an update request."
    ],
    "version":
        "https://github.com/Microsoft/TypeScript-TmLanguage/commit/8361b1a232501c67911c81a4664a9460d7922c6b",
    "name": "STNE Script based on JavaScript",
    "scopeName": "source.stne",
    "uuid": "805375ec-d614-41f5-8993-5843fe63ea82",
    "patterns": [
        {
            "include": "#directives"
        },
        {
            "include": "#statements"
        },
        {
            "name": "comment.line.shebang.ts",
            "match": "\\A(#!).*(?=$)",
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.ts"
                }
            }
        }
    ],
    "tokenColors": {
        "name": "constant.numeric",
        "scope": [
            "constant.numeric"
        ],
        "settings": {
            "foreground": "#cf7a25"
        }
    },
    "repository": {
        "statements": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#declaration"
                },
                {
                    "include": "#control-statement"
                },
                {
                    "include": "#decl-block"
                },
                {
                    "include": "#assignment"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-semicolon"
                }
            ]
        },
        "declaration": {
            "patterns": [
                {
                    "include": "#decorator"
                },
                {
                    "include": "#var-expr"
                },
                {
                    "include": "#function-declaration"
                },
                {
                    "include": "#class-declaration"
                },
                {
                    "include": "#enum-declaration"
                },
                {
                    "include": "#namespace-declaration"
                },
                {
                    "include": "#type-alias-declaration"
                },
                {
                    "include": "#import-equals-declaration"
                },
                {
                    "include": "#import-declaration"
                },
                {
                    "include": "#export-declaration"
                }
            ]
        },
        "control-statement": {
            "patterns": [
                {
                    "include": "#for-loop"
                },
                {
                    "name": "keyword.control.trycatch.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(catch|finally|throw|try)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.loop.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(exit|do|while)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.flow.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(return)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.conditional.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(else|if|elseif)\\b(?!\\$|\\.)"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#function-expression"
                },
                {
                    "include": "#ternary-expression"
                },
                {
                    "include": "#new-expr"
                },
                {
                    "include": "#expression-operators"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#literal"
                },
                {
                    "include": "#support-objects"
                },
                {
                    "include": "#identifiers"
                },
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-accessor"
                }
            ]
        },
        "decorator": {
            "name": "meta.decorator.stne",
            "begin": "(?<!\\.|\\$)\\@",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.decorator.stne"
                }
            },
            "end": "(?=\\s)",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "assignment": {
            "name": "meta.assignment.stne",
            "begin":
                "(?ix)(?!\\s*(To|In|Step))(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
            "end": "(?i)(?=[;\\)}]|(\\s+(In|To|Step)\\s+))",
            "patterns": [
                {
                    "include": "#var-single-variable"
                },
                {
                    "include": "#variable-initializer"
                }
            ]
        },
        "var-expr": {
            "name": "meta.var.expr.stne",
            "begin":
                "(?i)(?<!\\.|\\$)\\b(Var(?!\\s+enum\\b))\\b(?!\\$|\\.)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.stne"
                }
            },
            "end": "(?=$|^|;|}|(\\s+(of|in)\\s+))",
            "patterns": [
                {
                    "include": "#destructuring-variable"
                },
                {
                    "include": "#var-single-variable"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#comment"
                },
                {
                    "begin": "(,)\\s*(?!\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.comma.stne"
                        }
                    },
                    "end": "(?<!,)((?==|;|}|(\\s+(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$))",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#destructuring-variable"
                        },
                        {
                            "include": "#var-single-variable"
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "var-single-variable": {
            "patterns": [
                {
                    "name": "meta.var-single-variable.expr.stne",
                    "begin":
                        "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.definition.variable.stne entity.name.function.stne"
                        }
                    },
                    "end": "(?i)(?=$|^|[;,=}]|(\\s+(of|in|to)\\s+))",
                    "patterns": [
                        {
                            "include": "#var-single-variable-type-annotation"
                        }
                    ]
                },
                {
                    "name": "meta.var-single-variable.expr.stne",
                    "begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.definition.variable.stne variable.other.constant.stne"
                        }
                    },
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#var-single-variable-type-annotation"
                        }
                    ]
                },
                {
                    "name": "meta.var-single-variable.expr.stne",
                    "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.definition.variable.stne variable.other.readwrite.stne"
                        }
                    },
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#var-single-variable-type-annotation"
                        }
                    ]
                }
            ]
        },
        "var-single-variable-type-annotation": {
            "patterns": [
                {
                    "include": "#type-annotation-with-initialization"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                }
            ]
        },
        "destructuring-variable": {
            "patterns": [
                {
                    "name": "meta.object-binding-pattern-variable.stne",
                    "begin": "(?<!=|:|of|in)\\s*(?=\\{)",
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#object-binding-pattern"
                        },
                        {
                            "include": "#type-annotation"
                        },
                        {
                            "include": "#comment"
                        }
                    ]
                },
                {
                    "name": "meta.array-binding-pattern-variable.stne",
                    "begin": "(?<!=|:|of|in)\\s*(?=\\[)",
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#array-binding-pattern"
                        },
                        {
                            "include": "#type-annotation"
                        },
                        {
                            "include": "#comment"
                        }
                    ]
                }
            ]
        },
        "object-binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
                    "end": "(?=,|\\})",
                    "patterns": [
                        {
                            "include": "#object-binding-element-propertyName"
                        },
                        {
                            "include": "#binding-element"
                        }
                    ]
                },
                {
                    "include": "#object-binding-pattern"
                },
                {
                    "include": "#destructuring-variable-rest"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "object-binding-element-propertyName": {
            "begin":
                "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
            "end": "(:)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.destructuring.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "name": "variable.object.property.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                }
            ]
        },
        "binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#object-binding-pattern"
                },
                {
                    "include": "#array-binding-pattern"
                },
                {
                    "include": "#destructuring-variable-rest"
                },
                {
                    "include": "#variable-initializer"
                }
            ]
        },
        "destructuring-variable-rest": {
            "match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
            "captures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "meta.definition.variable.stne variable.other.readwrite.stne"
                }
            }
        },
        "object-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "patterns": [
                {
                    "include": "#object-binding-element"
                }
            ]
        },
        "array-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "patterns": [
                {
                    "include": "#binding-element"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "parameter-name": {
            "patterns": [
                {
                    "match":
                        "(?:\\s*\\b([_$[:alpha:]][_$[:alnum:]]*))\\s*",
                    "captures": {
                        "1": {
                            "name": "variable.parameter.stne"
                        }
                    }
                }
            ]
        },
        "destructuring-parameter": {
            "patterns": [
                {
                    "name": "meta.parameter.object-binding-pattern.stne",
                    "begin": "(?<!=|:)\\s*(\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.binding-pattern.object.stne"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.binding-pattern.object.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#parameter-object-binding-element"
                        }
                    ]
                },
                {
                    "name": "meta.paramter.array-binding-pattern.stne",
                    "begin": "(?<!=|:)\\s*(\\[)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.binding-pattern.array.stne"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.binding-pattern.array.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#parameter-binding-element"
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                }
            ]
        },
        "parameter-object-binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
                    "end": "(?=,|\\})",
                    "patterns": [
                        {
                            "include": "#object-binding-element-propertyName"
                        },
                        {
                            "include": "#parameter-binding-element"
                        }
                    ]
                },
                {
                    "include": "#parameter-object-binding-pattern"
                },
                {
                    "include": "#destructuring-parameter-rest"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "parameter-binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#parameter-object-binding-pattern"
                },
                {
                    "include": "#parameter-array-binding-pattern"
                },
                {
                    "include": "#destructuring-parameter-rest"
                },
                {
                    "include": "#variable-initializer"
                }
            ]
        },
        "destructuring-parameter-rest": {
            "match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
            "captures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "variable.parameter.stne"
                }
            }
        },
        "parameter-object-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "patterns": [
                {
                    "include": "#parameter-object-binding-element"
                }
            ]
        },
        "parameter-array-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "patterns": [
                {
                    "include": "#parameter-binding-element"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "field-declaration": {
            "name": "meta.field.declaration.stne",
            "begin":
                "(?<!\\()(?:(?<!\\.|\\$)\\b(readonly)\\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                }
            },
            "end":
                "(?=\\}|;|,|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?<=\\})",
            "patterns": [
                {
                    "include": "#variable-initializer"
                },
                {
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))",
                    "end":
                        "(?=[};,=]|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-annotation"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#array-literal"
                        },
                        {
                            "include": "#comment"
                        },
                        {
                            "name": "meta.definition.property.stne entity.name.function.stne",
                            "match":
                                "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=(\\?\\s*)?\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))"
                        },
                        {
                            "name": "meta.definition.property.stne variable.object.property.stne",
                            "match": "[_$[:alpha:]][_$[:alnum:]]*"
                        },
                        {
                            "name": "keyword.operator.optional.stne",
                            "match": "\\?"
                        }
                    ]
                }
            ]
        },
        "variable-initializer": {
            "patterns": [
                {
                    "begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    },
                    "end": "(?=$|^|[,);}\\]]|(\\s+(In|To|Step)\\s+))",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "begin": "(?<!=|!)(=)(?!=)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    },
                    "end": "(?=[,);}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "function-declaration": {
            "name": "meta.function.stne",
            "begin":
                "(?i)(?<!\\.|\\$)\\b(?:\\b(Public)\\s+)?\\b(Function\\b)(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                },
                "2": {
                    "name": "storage.type.function.stne"
                },
                "3": {
                    "name": "meta.definition.function.stne entity.name.function.stne"
                }
            },
            "end": "(?=$|^|;)|(?<=\\})",
            "patterns": [
                {
                    "include": "#function-body"
                }
            ]
        },
        "function-expression": {
            "name": "meta.function.expression.stne",
            "begin":
                "(?<!\\.|\\$)\\b(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.async.stne"
                },
                "2": {
                    "name": "storage.type.function.stne"
                },
                "3": {
                    "name": "keyword.generator.asterisk.stne"
                },
                "4": {
                    "name": "meta.definition.function.stne entity.name.function.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#function-body"
                }
            ]
        },
        "function-body": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#function-parameters"
                },
                {
                    "include": "#return-type"
                },
                {
                    "include": "#decl-block"
                }
            ]
        },
        "method-declaration": {
            "patterns": [
                {
                    "name": "meta.method.declaration.stne",
                    "begin":
                        "(?i)(?<!\\.|\\$)(?:\\b(Public)\\s+)?\\b(Function)\\s+(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\<])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.stne"
                        },
                        "2": {
                            "name": "storage.type.function.stne"
                        }
                    },
                    "end": "(?=\\}|;|,|$)|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#method-declaration-name"
                        },
                        {
                            "include": "#function-body"
                        }
                    ]
                }
            ]
        },
        "method-declaration-name": {
            "begin":
                "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
            "end": "(?=\\(|\\<)",
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "name": "meta.definition.method.stne entity.name.function.stne",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                },
                {
                    "name": "keyword.operator.optional.stne",
                    "match": "\\?"
                }
            ]
        },
        "indexer-declaration": {
            "name": "meta.indexer.declaration.stne",
            "begin":
                "(?:(?<!\\.|\\$)\\b(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                },
                "2": {
                    "name": "meta.brace.square.stne"
                },
                "3": {
                    "name": "variable.parameter.stne"
                }
            },
            "end": "(\\])\\s*(\\?\\s*)?|$",
            "endCaptures": {
                "1": {
                    "name": "meta.brace.square.stne"
                },
                "2": {
                    "name": "keyword.operator.optional.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type-annotation"
                }
            ]
        },
        "indexer-mapped-type-declaration": {
            "name": "meta.indexer.mappedtype.declaration.stne",
            "begin":
                "(?:(?<!\\.|\\$)\\b(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                },
                "2": {
                    "name": "meta.brace.square.stne"
                },
                "3": {
                    "name": "entity.name.type.stne"
                },
                "4": {
                    "name": "keyword.operator.expression.in.stne"
                }
            },
            "end": "(\\])\\s*(\\?\\s*)?|$",
            "endCaptures": {
                "1": {
                    "name": "meta.brace.square.stne"
                },
                "2": {
                    "name": "keyword.operator.optional.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                }
            ]
        },
        "function-parameters": {
            "name": "meta.parameters.stne",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.begin.stne"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "include": "#parameter-name"
                },
                {
                    "name": "punctuation.separator.parameter.stne",
                    "match": ","
                }
            ]
        },
        "class-declaration": {
            "name": "meta.class.stne",
            "begin":
                "(?i)(?<!\\.|\\$)\\b(class)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.class.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#class-declaration-patterns"
                }
            ]
        },
        "class-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.stne"
                        }
                    }
                },
                {
                    "include": "#class-body"
                }
            ]
        },
        "class-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#decorator"
                },
                {
                    "include": "#method-declaration"
                },
                {
                    "include": "#indexer-declaration"
                },
                {
                    "include": "#field-declaration"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#access-modifier"
                },
                {
                    "include": "#property-accessor"
                },
                {
                    "include": "#decl-block"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-semicolon"
                }
            ]
        },
        "access-modifier": {
            "name": "storage.modifier.stne",
            "match":
                "(?<!\\.|\\$)\\b(abstract|public|protected|private|readonly|static)\\b(?!\\$|\\.)"
        },
        "property-accessor": {
            "name": "storage.type.property.stne",
            "match": "(?<!\\.|\\$)\\b(get|set)\\b(?!\\$|\\.)"
        },
        "enum-declaration": {
            "name": "meta.enum.declaration.stne",
            "begin":
                "(?<!\\.|\\$)(?:(\\bexport)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.modifier.stne"
                },
                "3": {
                    "name": "storage.type.enum.stne"
                },
                "4": {
                    "name": "entity.name.type.enum.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin": "\\{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.stne"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
                            "beginCaptures": {
                                "0": {
                                    "name": "variable.other.enummember.stne"
                                }
                            },
                            "end": "(?=,|\\}|$)",
                            "patterns": [
                                {
                                    "include": "#comment"
                                },
                                {
                                    "include": "#variable-initializer"
                                }
                            ]
                        },
                        {
                            "begin":
                                "(?=((\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
                            "end": "(?=,|\\}|$)",
                            "patterns": [
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#array-literal"
                                },
                                {
                                    "include": "#comment"
                                },
                                {
                                    "include": "#variable-initializer"
                                }
                            ]
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                }
            ]
        },
        "namespace-declaration": {
            "name": "meta.namespace.declaration.stne",
            "begin":
                "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.type.namespace.stne"
                }
            },
            "end":
                "(?<=\\})|(?=;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "name": "entity.name.type.module.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                },
                {
                    "include": "#punctuation-accessor"
                },
                {
                    "include": "#decl-block"
                }
            ]
        },
        "type-alias-declaration": {
            "name": "meta.type.declaration.stne",
            "begin":
                "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.type.type.stne"
                },
                "3": {
                    "name": "entity.name.type.alias.stne"
                }
            },
            "end":
                "(?=[};]|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#type"
                },
                {
                    "match": "(=)\\s*",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    }
                }
            ]
        },
        "import-equals-declaration": {
            "patterns": [
                {
                    "name": "meta.import-equals.external.stne",
                    "begin":
                        "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.control.import.stne"
                        },
                        "3": {
                            "name": "variable.other.readwrite.alias.stne"
                        },
                        "4": {
                            "name": "keyword.operator.assignment.stne"
                        },
                        "5": {
                            "name": "keyword.control.require.stne"
                        },
                        "6": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "name": "meta.import-equals.internal.stne",
                    "begin":
                        "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.control.import.stne"
                        },
                        "3": {
                            "name": "variable.other.readwrite.alias.stne"
                        },
                        "4": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    },
                    "end": "(?=;|$|^)",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
                            "captures": {
                                "1": {
                                    "name": "entity.name.type.module.stne"
                                },
                                "2": {
                                    "name": "punctuation.accessor.stne"
                                }
                            }
                        },
                        {
                            "name": "variable.other.readwrite.stne",
                            "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                        }
                    ]
                }
            ]
        },
        "import-declaration": {
            "name": "meta.import.stne",
            "begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)(?!(\\s*[:\\(])|(\\$|\\.))\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "keyword.control.import.stne"
                }
            },
            "end": "(?=;|$|^)",
            "patterns": [
                {
                    "include": "#import-export-declaration"
                }
            ]
        },
        "export-declaration": {
            "patterns": [
                {
                    "match":
                        "(?<!\\.|\\$)\\b(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.control.as.stne"
                        },
                        "3": {
                            "name": "storage.type.namespace.stne"
                        },
                        "4": {
                            "name": "entity.name.type.module.stne"
                        }
                    }
                },
                {
                    "name": "meta.export.default.stne",
                    "begin": "(?<!\\.|\\$)\\b(export)(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.stne"
                        },
                        "3": {
                            "name": "keyword.control.default.stne"
                        }
                    },
                    "end":
                        "(?=;|$|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "meta.export.stne",
                    "begin": "(?<!\\.|\\$)\\b(export)(?!(\\s*:)|(\\$))\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.export.stne"
                        }
                    },
                    "end":
                        "(?=;|$|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
                    "patterns": [
                        {
                            "include": "#import-export-declaration"
                        }
                    ]
                }
            ]
        },
        "import-export-declaration": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#import-export-block"
                },
                {
                    "name": "keyword.control.from.stne",
                    "match": "\\bfrom\\b"
                },
                {
                    "include": "#import-export-clause"
                }
            ]
        },
        "import-export-block": {
            "name": "meta.block.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#import-export-clause"
                }
            ]
        },
        "import-export-clause": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match":
                        "(?<!\\.|\\$)(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*))\\s+(as)\\s+(\\b[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.default.stne"
                        },
                        "2": {
                            "name": "constant.language.import-export-all.stne"
                        },
                        "3": {
                            "name": "variable.other.readwrite.stne"
                        },
                        "4": {
                            "name": "keyword.control.as.stne"
                        },
                        "5": {
                            "name": "variable.other.readwrite.alias.stne"
                        }
                    }
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "name": "constant.language.import-export-all.stne",
                    "match": "\\*"
                },
                {
                    "name": "keyword.control.default.stne",
                    "match": "\\b(default)\\b"
                },
                {
                    "name": "variable.other.readwrite.alias.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                }
            ]
        },
        "for-loop": {
            "patterns": [
                {
                    "name": "meta.loop.for.stne",
                    "begin": "(?i)(?<!\\.|\\$)\\b(For)?\\s*(\\()\\s*(?!Each)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.loop.stne"
                        },
                        "2": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "patterns": [
                        {
                            "name": "keyword.operator.expression.step.stne",
                            "match": "(?i)(?<=\\s)Step(?:\\s)"
                        },
                        {
                            "name": "keyword.operator.expression.to.stne",
                            "match": "(?i)(?<=\\s)To(?:\\s)"
                        },
                        {
                            "include": "#assignment"
                        },
                        {
                            "include": "#var-expr"
                        },
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "meta.loop.foreach.stne",
                    "begin": "(?i)(?<!\\.|\\$)\\b(For)?\\s*(\\()\\s*(Each)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.loop.stne"
                        },
                        "2": {
                            "name": "meta.brace.round.stne"
                        },
                        "3": {
                            "name": "keyword.operator.expression.each.stne"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "patterns": [
                        {
                            "name": "keyword.operator.expression.in.stne",
                            "match": "(?i)(?<=\\s)In(?:\\s)"
                        },
                        {
                            "include": "#var-expr"
                        },
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "decl-block": {
            "name": "meta.block.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#statements"
                }
            ]
        },
        "ternary-expression": {
            "begin": "(\\?)",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.ternary.stne"
                }
            },
            "end": "(:)",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.ternary.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "function-call": {
            "begin":
                "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`]([^<>]|\\<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`][^<>]+\\>)+>\\s*)?\\()",
            "end":
                "(?<=\\))(?!(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`]([^<>]|\\<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`][^<>]+\\>)+>\\s*)?\\()",
            "patterns": [
                {
                    "name": "meta.function-call.stne",
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
                    "end":
                        "(?=\\s*(<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`]([^<>]|\\<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`][^<>]+\\>)+>\\s*)?\\()",
                    "patterns": [
                        {
                            "include": "#literal"
                        },
                        {
                            "include": "#support-objects"
                        },
                        {
                            "include": "#object-identifiers"
                        },
                        {
                            "include": "#punctuation-accessor"
                        },
                        {
                            "name": "keyword.operator.expression.import.stne",
                            "match": "(?![\\.\\$])\\bimport(?=\\s*[\\(]\\s*[\\\"\\'\\`])"
                        },
                        {
                            "name": "entity.name.function.stne",
                            "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                        }
                    ]
                },
                {
                    "include": "#comment"
                },
                {
                    "name": "meta.type.parameters.stne",
                    "begin": "\\<",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.typeparameters.begin.stne"
                        }
                    },
                    "end": "\\>",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.typeparameters.end.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                },
                {
                    "include": "#paren-expression"
                }
            ]
        },
        "new-expr": {
            "name": "new.expr.stne",
            "begin": "(?i)(?<!\\.|\\$)\\b(New)\\b(?!\\$|\\.)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.new.stne"
                }
            },
            "end":
                "(?i)(?<=\\))|(?=[;),}\\]]|$|((?<!\\.|\\$)\\bNew\\b(?!\\$|\\.))|((?<!\\.|\\$)\\bfunction((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
            "patterns": [
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#class-declaration"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "paren-expression": {
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "expression-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.expression.in.stne",
                    "match": "(?i)(?<!\\.|\\$)\\bin\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.operator.expression.addressof.stne",
                    "match": "(?<!\\.|\\$)\\bAddressOf\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.operator.new.stne",
                    "match": "(?i)(?<!\\.|\\$)\\bNew\\b(?!\\$|\\.)"
                },
                {
                    "begin": "(?i)(?<!\\.|\\$)\\b(As)\\s+",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.as.stne"
                        }
                    },
                    "end": "(?=$|^|[;,:})\\]]|((?<!\\.|\\$)\\b(as)\\s+))",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                {
                    "name": "keyword.operator.comparison.stne",
                    "match": "=|<>"
                },
                {
                    "name": "keyword.operator.relational.stne",
                    "match": "<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.logical.stne",
                    "match": "(?i)\\not|and|or"
                },
                {
                    "name": "keyword.operator.bitwise.stne",
                    "match": "\\&|~|\\^|\\|"
                },
                {
                    "name": "keyword.operator.assignment.stne",
                    "match": "\\="
                },
                {
                    "name": "keyword.operator.decrement.stne",
                    "match": "--"
                },
                {
                    "name": "keyword.operator.increment.stne",
                    "match": "\\+\\+"
                },
                {
                    "name": "keyword.operator.arithmetic.stne",
                    "match": "\\*|/|-|\\+"
                },
                {
                    "match": "(?<=[_$[:alnum:])])\\s*(/)(?![/*])",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.arithmetic.stne"
                        }
                    }
                }
            ]
        },
        "typeof-operator": {
            "name": "keyword.operator.expression.typeof.stne",
            "match": "(?<!\\.|\\$)\\btypeof\\b(?!\\$|\\.)"
        },
        "literal": {
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#null-literal"
                },
                {
                    "include": "#nothing-literal"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "include": "#this-literal"
                },
                {
                    "include": "#super-literal"
                }
            ]
        },
        "array-literal": {
            "name": "meta.array.literal.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.curly.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.curly.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "numeric-literal": {
            "patterns": [
                {
                    "match":
                        "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+\\b)                     # 1\n)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.stne"
                        },
                        "1": {
                            "name": "meta.delimiter.decimal.period.stne"
                        }
                    }
                }
            ]
        },
        "boolean-literal": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.stne",
                    "match": "(?i)(?<!\\.|\\$)\\btrue\\b(?!\\$)"
                },
                {
                    "name": "constant.language.boolean.false.stne",
                    "match": "(?i)(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
                }
            ]
        },
        "null-literal": {
            "name": "constant.language.null.stne",
            "match": "(?i)(?<!\\.|\\$)\\bnull\\b(?!\\$)"
        },
        "nothing-literal": {
            "name": "constant.language.nothing.stne",
            "match": "(?i)(?<!\\.|\\$)\\bnothing\\b(?!\\$)"
        },
        "this-literal": {
            "name": "variable.language.this.stne",
            "match": "(?i)(?<!\\$)((?<=\\.\\.\\.)|(?<!\\.))\\bthis\\b(?!\\$)"
        },
        "support-objects": {
            "patterns": [
                {
                    "name": "support.class.builtin.stne",
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(Array|Boolean|Byte|Char|CommandLineArgumentEntry|CommandLineArguments|Date|DictionaryEntry|Double|Enum|Global|Integer|Log|Long|Object|PageLog|Random|ScriptBase|ScriptStart|Server|Short|String)\\b(?!\\$)"
                },
                {
                    "name": "support.function.stne",
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(WriteLine)(?=\\s*\\()"
                },
                {
                    "name": "support.function.conversion.stne",
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(CStr|CInt|CBool|CDbl|CShort|CByte|CDate|CLng)(?=\\s*\\()"
                },
                {
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(Math)(?:\\s*(\\.)\\s*(?:\n  (Abs|Acos|Asin|Atan|Atan2|BigMul|Ceiling|Cos|Cosh|Exp|Floor|IEEERemainder|Log|Log10|Max|Min|Pow|Round|Sign|Sin|Sinh|Sqrt|Tan|Tanh|Truncated)\n  |\n  (E|PI)))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.constant.math.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        },
                        "3": {
                            "name": "support.function.math.stne"
                        },
                        "4": {
                            "name": "support.constant.property.math.stne"
                        }
                    }
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "include": "#object-identifiers"
                },
                {
                    "match":
                        "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n))",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "entity.name.function.stne"
                        }
                    }
                },
                {
                    "match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "variable.other.constant.property.stne"
                        }
                    }
                },
                {
                    "match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "variable.other.property.stne"
                        }
                    }
                },
                {
                    "name": "variable.other.constant.stne",
                    "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
                },
                {
                    "name": "variable.other.readwrite.stne",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                }
            ]
        },
        "object-identifiers": {
            "patterns": [
                {
                    "name": "support.class.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
                },
                {
                    "match":
                        "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "variable.other.constant.object.property.stne"
                        },
                        "3": {
                            "name": "variable.other.object.property.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "variable.other.constant.object.stne"
                        },
                        "2": {
                            "name": "variable.other.object.stne"
                        }
                    }
                }
            ]
        },
        "type-annotation": {
            "patterns": [
                {
                    "name": "meta.type.annotation.stne",
                    "begin": "(?i)(As)(?=\\s*(?!New)\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end":
                        "(?<![:|&])((?=$|^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                {
                    "name": "meta.type.annotation.stne",
                    "begin": "(?i)(As)(?!\\s*New)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end":
                        "(?<![:|&])((?=[,);\\}\\]]|//)|(?==[^>])|(?=^\\s*$)|((?<=\\S)(?=\\s*$))|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "type-annotation-with-initialization": {
            "patterns": [
                {
                    "name": "meta.type.annotation.stne",
                    "begin": "(?i)(As)\\s+(?=New)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end":
                        "(?<![:|&])((?=$|^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
                    "patterns": [
                        {
                            "include": "#new-expr"
                        }
                    ]
                },
                {
                    "name": "meta.type.annotation.stne",
                    "begin": "(?i)(As)\\s+(?=New)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end":
                        "(?<![:|&])((?=[,);\\}\\]]|//)|(?==[^>])|(?=^\\s*$)|((?<=\\S)(?=\\s*$))|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
                    "patterns": [
                        {
                            "include": "#new-expr"
                        }
                    ]
                }
            ]
        },
        "return-type": {
            "patterns": [
                {
                    "name": "meta.return.type.stne",
                    "begin": "(?<=\\))\\s*((?i)As)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end": "(?<![:|&])(?=$|^|[{};,]|//)",
                    "patterns": [
                        {
                            "include": "#return-type-core"
                        }
                    ]
                },
                {
                    "name": "meta.return.type.stne",
                    "begin": "(?<=\\))\\s*(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end": "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
                    "patterns": [
                        {
                            "include": "#return-type-core"
                        }
                    ]
                }
            ]
        },
        "return-type-core": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin": "(?<=[:|&])(?=\\s*\\{)",
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "include": "#type-predicate-operator"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "arrow-return-type": {
            "name": "meta.return.type.arrow.stne",
            "begin": "(?<=\\))\\s*(:)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.type.annotation.stne"
                }
            },
            "end":
                "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
            "patterns": [
                {
                    "begin": "(?<=[:])(?=\\s*\\{)",
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "include": "#type-predicate-operator"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "type": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#type-primitive"
                },
                {
                    "include": "#type-builtin-literals"
                },
                {
                    "include": "#type-tuple"
                },
                {
                    "include": "#type-object"
                },
                {
                    "include": "#type-operators"
                },
                {
                    "include": "#type-fn-type-parameters"
                },
                {
                    "include": "#type-paren-or-function-parameters"
                },
                {
                    "include": "#type-function-return-type"
                },
                {
                    "include": "#type-name"
                }
            ]
        },
        "type-primitive": {
            "name": "support.type.primitive.stne",
            "match": "(?<!\\.|\\$)\\b(string|number|boolean|symbol|any|void|never)\\b(?!\\$|\\.)"
        },
        "type-builtin-literals": {
            "name": "support.type.builtin.stne",
            "match": "(?<!\\.|\\$)\\b(this|true|false|undefined|null|object)\\b(?!\\$|\\.)"
        },
        "type-tuple": {
            "name": "meta.type.tuple.stne",
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.square.stne"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.square.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "type-object": {
            "name": "meta.object.type.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#method-declaration"
                },
                {
                    "include": "#indexer-declaration"
                },
                {
                    "include": "#indexer-mapped-type-declaration"
                },
                {
                    "include": "#field-declaration"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "begin": "\\.\\.\\.",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.spread.stne"
                        }
                    },
                    "end": "(?=\\}|;|,|$)|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-semicolon"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "type-paren-or-function-parameters": {
            "name": "meta.type.paren.cover.stne",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                },
                {
                    "include": "#function-parameters"
                }
            ]
        },
        "type-fn-type-parameters": {
            "patterns": [
                {
                    "name": "meta.type.constructor.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(New)\\b(?=\\s*\\<)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.new.stne"
                        }
                    }
                },
                {
                    "name": "meta.type.constructor.stne",
                    "begin": "(?i)(?<!\\.|\\$)\\b(New)\\b\\s*(?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.new.stne"
                        }
                    },
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "include": "#function-parameters"
                        }
                    ]
                },
                {
                    "name": "meta.type.function.stne",
                    "begin":
                        "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )\n  )\n)",
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "include": "#function-parameters"
                        }
                    ]
                }
            ]
        },
        "type-function-return-type": {
            "patterns": [
                {
                    "name": "meta.type.function.return.stne",
                    "begin": "(=>)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.function.arrow.stne"
                        }
                    },
                    "end": "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>]|//|$)",
                    "patterns": [
                        {
                            "include": "#type-function-return-type-core"
                        }
                    ]
                },
                {
                    "name": "meta.type.function.return.stne",
                    "begin": "=>",
                    "beginCaptures": {
                        "0": {
                            "name": "storage.type.function.arrow.stne"
                        }
                    },
                    "end": "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
                    "patterns": [
                        {
                            "include": "#type-function-return-type-core"
                        }
                    ]
                }
            ]
        },
        "type-function-return-type-core": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin": "(?<==>)(?=\\s*\\{)",
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "include": "#type-predicate-operator"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "type-operators": {
            "patterns": [
                {
                    "include": "#typeof-operator"
                },
                {
                    "begin": "([&|])(?=\\s*\\{)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.type.stne"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "begin": "[&|]",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.type.stne"
                        }
                    },
                    "end": "(?=\\S)"
                },
                {
                    "name": "keyword.operator.expression.keyof.stne",
                    "match": "(?<!\\.|\\$)\\bkeyof\\b(?!\\$|\\.)"
                }
            ]
        },
        "type-predicate-operator": {
            "name": "keyword.operator.expression.is.stne",
            "match": "(?<!\\.|\\$)\\bis\\b(?!\\$|\\.)"
        },
        "type-name": {
            "patterns": [
                {
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.module.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        }
                    }
                },
                {
                    "name": "entity.name.type.stne",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                }
            ]
        },
        "punctuation-comma": {
            "name": "punctuation.separator.comma.stne",
            "match": ","
        },
        "punctuation-semicolon": {
            "name": "punctuation.terminator.statement.stne",
            "match": ";"
        },
        "punctuation-accessor": {
            "name": "punctuation.accessor.stne",
            "match": "\\."
        },
        "string": {
            "patterns": [
                {
                    "include": "#qstring-single"
                },
                {
                    "include": "#qstring-double"
                }
            ]
        },
        "qstring-double": {
            "name": "string.quoted.double.stne",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.stne"
                }
            },
            "end": "(\"(?!\"))|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.stne"
                },
                "2": {
                    "name": "invalid.illegal.newline.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string-double-quoted-character-escape"
                }
            ]
        },
        "qstring-single": {
            "name": "string.quoted.single.stne",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.stne"
                }
            },
            "end": "(\\'(?!'))|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.stne"
                },
                "2": {
                    "name": "invalid.illegal.newline.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string-single-quoted-character-escape"
                }
            ]
        },
        "string-single-quoted-character-escape": {
            "name": "constant.character.escape.stne",
            "match": "''"
        },
        "string-double-quoted-character-escape": {
            "name": "constant.character.escape.stne",
            "match": "\"\""
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.documentation.stne",
                    "begin": "/\\*\\*(?!/)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.stne"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#docblock"
                        }
                    ]
                },
                {
                    "name": "comment.block.stne",
                    "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.stne"
                        },
                        "2": {
                            "name": "storage.type.internaldeclaration.stne"
                        },
                        "3": {
                            "name": "punctuation.decorator.internaldeclaration.stne"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.stne"
                        }
                    }
                },
                {
                    "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.stne"
                        },
                        "2": {
                            "name": "comment.line.double-slash.stne"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.stne"
                        },
                        "4": {
                            "name": "storage.type.internaldeclaration.stne"
                        },
                        "5": {
                            "name": "punctuation.decorator.internaldeclaration.stne"
                        }
                    },
                    "end": "(?=^)",
                    "contentName": "comment.line.double-slash.stne"
                }
            ]
        },
        "directives": {
            "name": "comment.line.triple-slash.directive.stne",
            "begin":
                "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|name)\\s*=\\s*((\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")))+\\s*/>\\s*$)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.stne"
                }
            },
            "end": "(?=^)",
            "patterns": [
                {
                    "name": "meta.tag.stne",
                    "begin": "(<)(reference|amd-dependency|amd-module)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.directive.stne"
                        },
                        "2": {
                            "name": "entity.name.tag.directive.stne"
                        }
                    },
                    "end": "/>",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.directive.stne"
                        }
                    },
                    "patterns": [
                        {
                            "name": "entity.other.attribute-name.directive.stne",
                            "match": "path|types|no-default-lib|name"
                        },
                        {
                            "name": "keyword.operator.assignment.stne",
                            "match": "="
                        },
                        {
                            "include": "#string"
                        }
                    ]
                }
            ]
        },
        "docblock": {
            "patterns": [
                {
                    "match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "constant.language.access-type.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "4": {
                            "name": "punctuation.definition.bracket.angle.begin.stnedoc"
                        },
                        "5": {
                            "name": "constant.other.email.link.underline.stnedoc"
                        },
                        "6": {
                            "name": "punctuation.definition.bracket.angle.end.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "4": {
                            "name": "keyword.operator.control.stnedoc"
                        },
                        "5": {
                            "name": "entity.name.type.instance.stnedoc"
                        }
                    }
                },
                {
                    "name": "meta.example.stnedoc",
                    "begin": "((@)example)\\s+",
                    "end": "(?=@|\\*/)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "patterns": [
                        {
                            "match": "^\\s\\*\\s+"
                        },
                        {
                            "contentName": "constant.other.description.stnedoc",
                            "begin": "\\G(<)caption(>)",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.stnedoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.stnedoc"
                                }
                            },
                            "end": "(</)caption(>)|(?=\\*/)",
                            "endCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.stnedoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.stnedoc"
                                }
                            }
                        },
                        {
                            "match": "[^\\s@*](?:[^*]|\\*[^/])*",
                            "captures": {
                                "0": {
                                    "name": "source.embedded.stne"
                                }
                            }
                        }
                    ]
                },
                {
                    "match":
                        "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "constant.language.symbol-type.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.link.underline.stnedoc"
                        },
                        "4": {
                            "name": "entity.name.type.instance.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        }
                    }
                },
                {
                    "begin": "((@)typedef)\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "entity.name.type.instance.stnedoc",
                            "match": "(?:[^@\\s*/]|\\*[^/])+"
                        }
                    ]
                },
                {
                    "begin":
                        "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "variable.other.stnedoc",
                            "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
                        },
                        {
                            "name": "variable.other.stnedoc",
                            "match":
                                "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
                            "captures": {
                                "1": {
                                    "name":
                                        "punctuation.definition.optional-value.begin.bracket.square.stnedoc"
                                },
                                "2": {
                                    "name": "keyword.operator.assignment.stnedoc"
                                },
                                "3": {
                                    "name": "source.embedded.stne"
                                },
                                "4": {
                                    "name":
                                        "punctuation.definition.optional-value.end.bracket.square.stnedoc"
                                },
                                "5": {
                                    "name": "invalid.illegal.syntax.stnedoc"
                                }
                            }
                        }
                    ]
                },
                {
                    "begin":
                        "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        }
                    ]
                },
                {
                    "match":
                        "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.stnedoc"
                        }
                    }
                },
                {
                    "contentName": "variable.other.stnedoc",
                    "begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        },
                        "4": {
                            "name": "punctuation.definition.string.begin.stnedoc"
                        }
                    },
                    "end": "(\\3)|(?=$|\\*/)",
                    "endCaptures": {
                        "0": {
                            "name": "variable.other.stnedoc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.end.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        }
                    }
                },
                {
                    "name": "storage.type.class.stnedoc",
                    "match":
                        "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    }
                },
                {
                    "include": "#inline-tags"
                }
            ]
        },
        "brackets": {
            "patterns": [
                {
                    "begin": "{",
                    "end": "}|(?=\\*/)",
                    "patterns": [
                        {
                            "include": "#brackets"
                        }
                    ]
                },
                {
                    "begin": "\\[",
                    "end": "\\]|(?=\\*/)",
                    "patterns": [
                        {
                            "include": "#brackets"
                        }
                    ]
                }
            ]
        },
        "inline-tags": {
            "patterns": [
                {
                    "name": "constant.other.description.stnedoc",
                    "match": "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.bracket.square.begin.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.bracket.square.end.stnedoc"
                        }
                    }
                },
                {
                    "name": "entity.name.type.instance.stnedoc",
                    "begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.bracket.curly.begin.stnedoc"
                        },
                        "2": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "3": {
                            "name": "punctuation.definition.inline.tag.stnedoc"
                        }
                    },
                    "end": "}|(?=\\*/)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.bracket.curly.end.stnedoc"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?",
                            "captures": {
                                "1": {
                                    "name": "variable.other.link.underline.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.separator.pipe.stnedoc"
                                }
                            }
                        },
                        {
                            "match": "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?",
                            "captures": {
                                "1": {
                                    "name": "variable.other.description.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.separator.pipe.stnedoc"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "jsdoctype": {
            "patterns": [
                {
                    "name": "invalid.illegal.type.stnedoc",
                    "match": "\\G{(?:[^}*]|\\*[^/}])+$"
                },
                {
                    "contentName": "entity.name.type.instance.stnedoc",
                    "begin": "\\G({)",
                    "beginCaptures": {
                        "0": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "1": {
                            "name": "punctuation.definition.bracket.curly.begin.stnedoc"
                        }
                    },
                    "end": "((}))\\s*|(?=\\*/)",
                    "endCaptures": {
                        "1": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.bracket.curly.end.stnedoc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#brackets"
                        }
                    ]
                }
            ]
        }
    }
}