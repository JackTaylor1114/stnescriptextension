{
    "information_for_contributors": [
        "This file has been converted from https://github.com/Microsoft/TypeScript-TmLanguage/blob/master/TypeScriptReact.tmLanguage",
        "If you want to provide a fix or improvement, please create a pull request against the original repository.",
        "Once accepted there, we are happy to receive an update request."
    ],
    "version":
        "https://github.com/Microsoft/TypeScript-TmLanguage/commit/8361b1a232501c67911c81a4664a9460d7922c6b",
    "name": "STNE Script based on JavaScript",
    "scopeName": "source.stne",
    "uuid": "805375ec-d614-41f5-8993-5843fe63ea82",
    "patterns": [
        {
            "include": "#directives"
        },
        {
            "include": "#statements"
        },
        {
            "name": "comment.line.shebang.ts",
            "match": "\\A(#!).*(?=$)",
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.ts"
                }
            }
        }
    ],
    "tokenColors": {
        "name": "constant.numeric",
        "scope": [
            "constant.numeric"
        ],
        "settings": {
            "foreground": "#cf7a25"
        }
    },
    "repository": {
        "statements": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#template"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#declaration"
                },
                {
                    "include": "#control-statement"
                },
                {
                    "include": "#after-operator-block-as-object-literal"
                },
                {
                    "include": "#decl-block"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-semicolon"
                }
            ]
        },
        "declaration": {
            "patterns": [
                {
                    "include": "#decorator"
                },
                {
                    "include": "#var-expr"
                },
                {
                    "include": "#function-declaration"
                },
                {
                    "include": "#class-declaration"
                },
                {
                    "include": "#interface-declaration"
                },
                {
                    "include": "#enum-declaration"
                },
                {
                    "include": "#namespace-declaration"
                },
                {
                    "include": "#type-alias-declaration"
                },
                {
                    "include": "#import-equals-declaration"
                },
                {
                    "include": "#import-declaration"
                },
                {
                    "include": "#export-declaration"
                }
            ]
        },
        "control-statement": {
            "patterns": [
                {
                    "include": "#switch-statement"
                },
                {
                    "include": "#for-loop"
                },
                {
                    "name": "keyword.control.trycatch.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(catch|finally|throw|try)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.loop.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(break|continue|do|goto|while)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.flow.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(return)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.switch.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(case|default|switch)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.conditional.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(else|if)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.control.with.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(with)\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.other.debugger.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(debugger)\\b(?!\\$|\\.)"
                },
                {
                    "name": "storage.modifier.stne",
                    "match": "(?i)(?<!\\.|\\$)\\b(declare)\\b(?!\\$|\\.)"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#jsx"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#regex"
                },
                {
                    "include": "#template"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#function-expression"
                },
                {
                    "include": "#class-expression"
                },
                {
                    "include": "#arrow-function"
                },
                {
                    "include": "#cast"
                },
                {
                    "include": "#ternary-expression"
                },
                {
                    "include": "#new-expr"
                },
                {
                    "include": "#expression-operators"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#literal"
                },
                {
                    "include": "#support-objects"
                },
                {
                    "include": "#identifiers"
                },
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-accessor"
                }
            ]
        },
        "decorator": {
            "name": "meta.decorator.stne",
            "begin": "(?<!\\.|\\$)\\@",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.decorator.stne"
                }
            },
            "end": "(?=\\s)",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "var-expr": {
            "name": "meta.var.expr.stne",
            "begin":
                "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(Var|var|let|const(?!\\s+enum\\b))\\b(?!\\$|\\.)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.type.stne"
                }
            },
            "end": "(?=$|^|;|}|(\\s+(of|in)\\s+))",
            "patterns": [
                {
                    "include": "#destructuring-variable"
                },
                {
                    "include": "#var-single-variable"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#comment"
                },
                {
                    "begin": "(,)\\s*(?!\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.comma.stne"
                        }
                    },
                    "end": "(?<!,)((?==|;|}|(\\s+(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$))",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#destructuring-variable"
                        },
                        {
                            "include": "#var-single-variable"
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "var-single-variable": {
            "patterns": [
                {
                    "name": "meta.var-single-variable.expr.stne",
                    "begin":
                        "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.definition.variable.stne entity.name.function.stne"
                        }
                    },
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#var-single-variable-type-annotation"
                        }
                    ]
                },
                {
                    "name": "meta.var-single-variable.expr.stne",
                    "begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.definition.variable.stne variable.other.constant.stne"
                        }
                    },
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#var-single-variable-type-annotation"
                        }
                    ]
                },
                {
                    "name": "meta.var-single-variable.expr.stne",
                    "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.definition.variable.stne variable.other.readwrite.stne"
                        }
                    },
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#var-single-variable-type-annotation"
                        }
                    ]
                }
            ]
        },
        "var-single-variable-type-annotation": {
            "patterns": [
                {
                    "include": "#type-annotation"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                }
            ]
        },
        "destructuring-variable": {
            "patterns": [
                {
                    "name": "meta.object-binding-pattern-variable.stne",
                    "begin": "(?<!=|:|of|in)\\s*(?=\\{)",
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#object-binding-pattern"
                        },
                        {
                            "include": "#type-annotation"
                        },
                        {
                            "include": "#comment"
                        }
                    ]
                },
                {
                    "name": "meta.array-binding-pattern-variable.stne",
                    "begin": "(?<!=|:|of|in)\\s*(?=\\[)",
                    "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#array-binding-pattern"
                        },
                        {
                            "include": "#type-annotation"
                        },
                        {
                            "include": "#comment"
                        }
                    ]
                }
            ]
        },
        "object-binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
                    "end": "(?=,|\\})",
                    "patterns": [
                        {
                            "include": "#object-binding-element-propertyName"
                        },
                        {
                            "include": "#binding-element"
                        }
                    ]
                },
                {
                    "include": "#object-binding-pattern"
                },
                {
                    "include": "#destructuring-variable-rest"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "object-binding-element-propertyName": {
            "begin":
                "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
            "end": "(:)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.destructuring.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "name": "variable.object.property.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                }
            ]
        },
        "binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#object-binding-pattern"
                },
                {
                    "include": "#array-binding-pattern"
                },
                {
                    "include": "#destructuring-variable-rest"
                },
                {
                    "include": "#variable-initializer"
                }
            ]
        },
        "destructuring-variable-rest": {
            "match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
            "captures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "meta.definition.variable.stne variable.other.readwrite.stne"
                }
            }
        },
        "object-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "patterns": [
                {
                    "include": "#object-binding-element"
                }
            ]
        },
        "array-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "patterns": [
                {
                    "include": "#binding-element"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "parameter-name": {
            "patterns": [
                {
                    "match":
                        "\\s*\\b(public|protected|private|readonly)(?=\\s+(public|protected|private|readonly)\\s+)",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?x)(?:\\s*\\b(public|private|protected|readonly)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.stne"
                        },
                        "2": {
                            "name": "keyword.operator.rest.stne"
                        },
                        "3": {
                            "name": "entity.name.function.stne variable.language.this.stne"
                        },
                        "4": {
                            "name": "entity.name.function.stne"
                        },
                        "5": {
                            "name": "keyword.operator.optional.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?:\\s*\\b(public|private|protected|readonly)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)(?:((?<!\\.|\\$)\\bthis\\b(?!\\.|\\$))|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.stne"
                        },
                        "2": {
                            "name": "keyword.operator.rest.stne"
                        },
                        "3": {
                            "name": "variable.parameter.stne variable.language.this.stne"
                        },
                        "4": {
                            "name": "variable.parameter.stne"
                        },
                        "5": {
                            "name": "keyword.operator.optional.stne"
                        }
                    }
                }
            ]
        },
        "destructuring-parameter": {
            "patterns": [
                {
                    "name": "meta.parameter.object-binding-pattern.stne",
                    "begin": "(?<!=|:)\\s*(\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.binding-pattern.object.stne"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.binding-pattern.object.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#parameter-object-binding-element"
                        }
                    ]
                },
                {
                    "name": "meta.paramter.array-binding-pattern.stne",
                    "begin": "(?<!=|:)\\s*(\\[)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.binding-pattern.array.stne"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.binding-pattern.array.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#parameter-binding-element"
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                }
            ]
        },
        "parameter-object-binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
                    "end": "(?=,|\\})",
                    "patterns": [
                        {
                            "include": "#object-binding-element-propertyName"
                        },
                        {
                            "include": "#parameter-binding-element"
                        }
                    ]
                },
                {
                    "include": "#parameter-object-binding-pattern"
                },
                {
                    "include": "#destructuring-parameter-rest"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "parameter-binding-element": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#parameter-object-binding-pattern"
                },
                {
                    "include": "#parameter-array-binding-pattern"
                },
                {
                    "include": "#destructuring-parameter-rest"
                },
                {
                    "include": "#variable-initializer"
                }
            ]
        },
        "destructuring-parameter-rest": {
            "match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
            "captures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "variable.parameter.stne"
                }
            }
        },
        "parameter-object-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.object.stne"
                }
            },
            "patterns": [
                {
                    "include": "#parameter-object-binding-element"
                }
            ]
        },
        "parameter-array-binding-pattern": {
            "begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.rest.stne"
                },
                "2": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.binding-pattern.array.stne"
                }
            },
            "patterns": [
                {
                    "include": "#parameter-binding-element"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "field-declaration": {
            "name": "meta.field.declaration.stne",
            "begin":
                "(?<!\\()(?:(?<!\\.|\\$)\\b(readonly)\\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                }
            },
            "end":
                "(?=\\}|;|,|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?<=\\})",
            "patterns": [
                {
                    "include": "#variable-initializer"
                },
                {
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))",
                    "end":
                        "(?=[};,=]|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-annotation"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#array-literal"
                        },
                        {
                            "include": "#comment"
                        },
                        {
                            "name": "meta.definition.property.stne entity.name.function.stne",
                            "match":
                                "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=(\\?\\s*)?\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))"
                        },
                        {
                            "name": "meta.definition.property.stne variable.object.property.stne",
                            "match": "[_$[:alpha:]][_$[:alnum:]]*"
                        },
                        {
                            "name": "keyword.operator.optional.stne",
                            "match": "\\?"
                        }
                    ]
                }
            ]
        },
        "variable-initializer": {
            "patterns": [
                {
                    "begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    },
                    "end": "(?=$|^|[,);}\\]])",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "begin": "(?<!=|!)(=)(?!=)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    },
                    "end": "(?=[,);}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "function-declaration": {
            "name": "meta.function.stne",
            "begin":
                "(?<!\\.|\\$)\\b(?:(export)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.modifier.async.stne"
                },
                "3": {
                    "name": "storage.type.function.stne"
                },
                "4": {
                    "name": "keyword.generator.asterisk.stne"
                },
                "5": {
                    "name": "meta.definition.function.stne entity.name.function.stne"
                }
            },
            "end": "(?=$|^|;)|(?<=\\})",
            "patterns": [
                {
                    "include": "#function-body"
                }
            ]
        },
        "function-expression": {
            "name": "meta.function.expression.stne",
            "begin":
                "(?<!\\.|\\$)\\b(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.async.stne"
                },
                "2": {
                    "name": "storage.type.function.stne"
                },
                "3": {
                    "name": "keyword.generator.asterisk.stne"
                },
                "4": {
                    "name": "meta.definition.function.stne entity.name.function.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#function-body"
                }
            ]
        },
        "function-body": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#type-parameters"
                },
                {
                    "include": "#function-parameters"
                },
                {
                    "include": "#return-type"
                },
                {
                    "include": "#decl-block"
                }
            ]
        },
        "method-declaration": {
            "patterns": [
                {
                    "name": "meta.method.declaration.stne",
                    "begin":
                        "(?<!\\.|\\$)(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\<])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.stne"
                        },
                        "2": {
                            "name": "storage.modifier.stne"
                        },
                        "3": {
                            "name": "storage.modifier.async.stne"
                        },
                        "4": {
                            "name": "storage.type.property.stne"
                        },
                        "5": {
                            "name": "keyword.generator.asterisk.stne"
                        }
                    },
                    "end": "(?=\\}|;|,|$)|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#method-declaration-name"
                        },
                        {
                            "include": "#function-body"
                        }
                    ]
                },
                {
                    "name": "meta.method.declaration.stne",
                    "begin":
                        "(?<!\\.|\\$)(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\b(?:(new)|(constructor))\\b(?!\\$|\\.|:))|(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))?\\s*[\\(\\<]))",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.stne"
                        },
                        "2": {
                            "name": "storage.modifier.stne"
                        },
                        "3": {
                            "name": "storage.modifier.async.stne"
                        },
                        "4": {
                            "name": "keyword.operator.new.stne"
                        },
                        "5": {
                            "name": "storage.type.stne"
                        },
                        "6": {
                            "name": "keyword.generator.asterisk.stne"
                        }
                    },
                    "end": "(?=\\}|;|,|$)|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#method-declaration-name"
                        },
                        {
                            "include": "#function-body"
                        }
                    ]
                }
            ]
        },
        "object-literal-method-declaration": {
            "name": "meta.method.declaration.stne",
            "begin":
                "(?<!\\.|\\$)(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\<])",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.async.stne"
                },
                "2": {
                    "name": "storage.type.property.stne"
                },
                "3": {
                    "name": "keyword.generator.asterisk.stne"
                }
            },
            "end": "(?=\\}|;|,)|(?<=\\})",
            "patterns": [
                {
                    "include": "#method-declaration-name"
                },
                {
                    "include": "#function-body"
                },
                {
                    "begin":
                        "(?<!\\.|\\$)(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\<])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.async.stne"
                        },
                        "2": {
                            "name": "storage.type.property.stne"
                        },
                        "3": {
                            "name": "keyword.generator.asterisk.stne"
                        }
                    },
                    "end": "(?=\\(|\\<)",
                    "patterns": [
                        {
                            "include": "#method-declaration-name"
                        }
                    ]
                }
            ]
        },
        "method-declaration-name": {
            "begin":
                "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
            "end": "(?=\\(|\\<)",
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "name": "meta.definition.method.stne entity.name.function.stne",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                },
                {
                    "name": "keyword.operator.optional.stne",
                    "match": "\\?"
                }
            ]
        },
        "arrow-function": {
            "patterns": [
                {
                    "name": "meta.arrow.stne",
                    "match":
                        "(?:(?<!\\.|\\$)(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.async.stne"
                        },
                        "2": {
                            "name": "variable.parameter.stne"
                        }
                    }
                },
                {
                    "name": "meta.arrow.stne",
                    "begin":
                        "(?x) (?:\n  (?<!\\.|\\$)(\\basync)\n)? ((?<![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  )\n)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.async.stne"
                        }
                    },
                    "end":
                        "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#type-parameters"
                        },
                        {
                            "include": "#function-parameters"
                        },
                        {
                            "include": "#arrow-return-type"
                        }
                    ]
                },
                {
                    "name": "meta.arrow.stne",
                    "begin": "=>",
                    "beginCaptures": {
                        "0": {
                            "name": "storage.type.function.arrow.stne"
                        }
                    },
                    "end": "(?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S))",
                    "patterns": [
                        {
                            "include": "#decl-block"
                        },
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "indexer-declaration": {
            "name": "meta.indexer.declaration.stne",
            "begin":
                "(?:(?<!\\.|\\$)\\b(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                },
                "2": {
                    "name": "meta.brace.square.stne"
                },
                "3": {
                    "name": "variable.parameter.stne"
                }
            },
            "end": "(\\])\\s*(\\?\\s*)?|$",
            "endCaptures": {
                "1": {
                    "name": "meta.brace.square.stne"
                },
                "2": {
                    "name": "keyword.operator.optional.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type-annotation"
                }
            ]
        },
        "indexer-mapped-type-declaration": {
            "name": "meta.indexer.mappedtype.declaration.stne",
            "begin":
                "(?:(?<!\\.|\\$)\\b(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                },
                "2": {
                    "name": "meta.brace.square.stne"
                },
                "3": {
                    "name": "entity.name.type.stne"
                },
                "4": {
                    "name": "keyword.operator.expression.in.stne"
                }
            },
            "end": "(\\])\\s*(\\?\\s*)?|$",
            "endCaptures": {
                "1": {
                    "name": "meta.brace.square.stne"
                },
                "2": {
                    "name": "keyword.operator.optional.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                }
            ]
        },
        "function-parameters": {
            "name": "meta.parameters.stne",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.begin.stne"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#decorator"
                },
                {
                    "include": "#destructuring-parameter"
                },
                {
                    "include": "#parameter-name"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "name": "punctuation.separator.parameter.stne",
                    "match": ","
                }
            ]
        },
        "class-declaration": {
            "name": "meta.class.stne",
            "begin":
                "(?<!\\.|\\$)\\b(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.modifier.stne"
                },
                "3": {
                    "name": "storage.type.class.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#class-declaration-or-expression-patterns"
                }
            ]
        },
        "class-expression": {
            "name": "meta.class.stne",
            "begin": "(?<!\\.|\\$)\\b(class)\\b(?=\\s+|[<{]|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.class.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#class-declaration-or-expression-patterns"
                }
            ]
        },
        "class-declaration-or-expression-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#class-or-interface-heritage"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.stne"
                        }
                    }
                },
                {
                    "include": "#type-parameters"
                },
                {
                    "include": "#class-or-interface-body"
                }
            ]
        },
        "interface-declaration": {
            "name": "meta.interface.stne",
            "begin":
                "(?<!\\.|\\$)\\b(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.modifier.stne"
                },
                "3": {
                    "name": "storage.type.interface.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#class-or-interface-heritage"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.interface.stne"
                        }
                    }
                },
                {
                    "include": "#type-parameters"
                },
                {
                    "include": "#class-or-interface-body"
                }
            ]
        },
        "class-or-interface-heritage": {
            "begin": "(?<!\\.|\\$)(?:\\b(extends|implements)\\b)(?!\\$|\\.)",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.stne"
                }
            },
            "end": "(?=\\{)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#class-or-interface-heritage"
                },
                {
                    "include": "#type-parameters"
                },
                {
                    "match":
                        "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*([,<{]|extends|implements|//|/\\*))",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.module.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        }
                    }
                },
                {
                    "match":
                        "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*([,<{]|extends|implements|//|/\\*))",
                    "captures": {
                        "1": {
                            "name": "entity.other.inherited-class.stne"
                        }
                    }
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "class-or-interface-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#decorator"
                },
                {
                    "include": "#method-declaration"
                },
                {
                    "include": "#indexer-declaration"
                },
                {
                    "include": "#field-declaration"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "include": "#access-modifier"
                },
                {
                    "include": "#property-accessor"
                },
                {
                    "include": "#after-operator-block-as-object-literal"
                },
                {
                    "include": "#decl-block"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-semicolon"
                }
            ]
        },
        "access-modifier": {
            "name": "storage.modifier.stne",
            "match":
                "(?<!\\.|\\$)\\b(abstract|public|protected|private|readonly|static)\\b(?!\\$|\\.)"
        },
        "property-accessor": {
            "name": "storage.type.property.stne",
            "match": "(?<!\\.|\\$)\\b(get|set)\\b(?!\\$|\\.)"
        },
        "enum-declaration": {
            "name": "meta.enum.declaration.stne",
            "begin":
                "(?<!\\.|\\$)(?:(\\bexport)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.modifier.stne"
                },
                "3": {
                    "name": "storage.type.enum.stne"
                },
                "4": {
                    "name": "entity.name.type.enum.stne"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin": "\\{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.stne"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
                            "beginCaptures": {
                                "0": {
                                    "name": "variable.other.enummember.stne"
                                }
                            },
                            "end": "(?=,|\\}|$)",
                            "patterns": [
                                {
                                    "include": "#comment"
                                },
                                {
                                    "include": "#variable-initializer"
                                }
                            ]
                        },
                        {
                            "begin":
                                "(?=((\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
                            "end": "(?=,|\\}|$)",
                            "patterns": [
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#array-literal"
                                },
                                {
                                    "include": "#comment"
                                },
                                {
                                    "include": "#variable-initializer"
                                }
                            ]
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                }
            ]
        },
        "namespace-declaration": {
            "name": "meta.namespace.declaration.stne",
            "begin":
                "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.type.namespace.stne"
                }
            },
            "end":
                "(?<=\\})|(?=;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "name": "entity.name.type.module.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                },
                {
                    "include": "#punctuation-accessor"
                },
                {
                    "include": "#decl-block"
                }
            ]
        },
        "type-alias-declaration": {
            "name": "meta.type.declaration.stne",
            "begin":
                "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "storage.type.type.stne"
                },
                "3": {
                    "name": "entity.name.type.alias.stne"
                }
            },
            "end":
                "(?=[};]|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#type-parameters"
                },
                {
                    "include": "#type"
                },
                {
                    "match": "(=)\\s*",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    }
                }
            ]
        },
        "import-equals-declaration": {
            "patterns": [
                {
                    "name": "meta.import-equals.external.stne",
                    "begin":
                        "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.control.import.stne"
                        },
                        "3": {
                            "name": "variable.other.readwrite.alias.stne"
                        },
                        "4": {
                            "name": "keyword.operator.assignment.stne"
                        },
                        "5": {
                            "name": "keyword.control.require.stne"
                        },
                        "6": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "name": "meta.import-equals.internal.stne",
                    "begin":
                        "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.control.import.stne"
                        },
                        "3": {
                            "name": "variable.other.readwrite.alias.stne"
                        },
                        "4": {
                            "name": "keyword.operator.assignment.stne"
                        }
                    },
                    "end": "(?=;|$|^)",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
                            "captures": {
                                "1": {
                                    "name": "entity.name.type.module.stne"
                                },
                                "2": {
                                    "name": "punctuation.accessor.stne"
                                }
                            }
                        },
                        {
                            "name": "variable.other.readwrite.stne",
                            "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                        }
                    ]
                }
            ]
        },
        "import-declaration": {
            "name": "meta.import.stne",
            "begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)(?!(\\s*[:\\(])|(\\$|\\.))\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.export.stne"
                },
                "2": {
                    "name": "keyword.control.import.stne"
                }
            },
            "end": "(?=;|$|^)",
            "patterns": [
                {
                    "include": "#import-export-declaration"
                }
            ]
        },
        "export-declaration": {
            "patterns": [
                {
                    "match":
                        "(?<!\\.|\\$)\\b(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.control.as.stne"
                        },
                        "3": {
                            "name": "storage.type.namespace.stne"
                        },
                        "4": {
                            "name": "entity.name.type.module.stne"
                        }
                    }
                },
                {
                    "name": "meta.export.default.stne",
                    "begin": "(?<!\\.|\\$)\\b(export)(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.export.stne"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.stne"
                        },
                        "3": {
                            "name": "keyword.control.default.stne"
                        }
                    },
                    "end":
                        "(?=;|$|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "meta.export.stne",
                    "begin": "(?<!\\.|\\$)\\b(export)(?!(\\s*:)|(\\$))\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.export.stne"
                        }
                    },
                    "end":
                        "(?=;|$|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\btype\\b|\\bvar\\b)",
                    "patterns": [
                        {
                            "include": "#import-export-declaration"
                        }
                    ]
                }
            ]
        },
        "import-export-declaration": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#import-export-block"
                },
                {
                    "name": "keyword.control.from.stne",
                    "match": "\\bfrom\\b"
                },
                {
                    "include": "#import-export-clause"
                }
            ]
        },
        "import-export-block": {
            "name": "meta.block.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#import-export-clause"
                }
            ]
        },
        "import-export-clause": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match":
                        "(?<!\\.|\\$)(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*))\\s+(as)\\s+(\\b[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.default.stne"
                        },
                        "2": {
                            "name": "constant.language.import-export-all.stne"
                        },
                        "3": {
                            "name": "variable.other.readwrite.stne"
                        },
                        "4": {
                            "name": "keyword.control.as.stne"
                        },
                        "5": {
                            "name": "variable.other.readwrite.alias.stne"
                        }
                    }
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "name": "constant.language.import-export-all.stne",
                    "match": "\\*"
                },
                {
                    "name": "keyword.control.default.stne",
                    "match": "\\b(default)\\b"
                },
                {
                    "name": "variable.other.readwrite.alias.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                }
            ]
        },
        "switch-statement": {
            "name": "switch-statement.expr.stne",
            "begin": "(?i)(?<!\\.|\\$)(?=\\bswitch\\s*\\()",
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "name": "switch-expression.expr.stne",
                    "begin": "(?<!\\.|\\$)\\b(switch)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.switch.stne"
                        },
                        "2": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "switch-block.expr.stne",
                    "begin": "\\{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.stne"
                        }
                    },
                    "end": "(?=\\})",
                    "patterns": [
                        {
                            "name": "case-clause.expr.stne",
                            "begin": "(?<!\\.|\\$)\\b(case|default(?=:))\\b(?!\\$|\\.)",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.control.switch.stne"
                                }
                            },
                            "end": ":",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.section.case-statement.stne"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        },
                        {
                            "include": "#statements"
                        }
                    ]
                }
            ]
        },
        "for-loop": {
            "begin": "(?i)(?<!\\.|\\$)\\b(for)(?:\\s+(await))?\\s*(\\()",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.loop.stne"
                },
                "2": {
                    "name": "keyword.control.loop.stne"
                },
                "3": {
                    "name": "meta.brace.round.stne"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "patterns": [
                {
                    "include": "#var-expr"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-semicolon"
                }
            ]
        },
        "decl-block": {
            "name": "meta.block.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#statements"
                }
            ]
        },
        "after-operator-block-as-object-literal": {
            "name": "meta.objectliteral.stne",
            "begin":
                "(?<=[=(,\\[?+!]|await|return|yield|throw|in|of|typeof|&&|\\|\\||\\*)\\s*(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#object-member"
                }
            ]
        },
        "object-member": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#object-literal-method-declaration"
                },
                {
                    "name": "meta.object.member.stne meta.object-literal.key.stne",
                    "begin": "(?=\\[)",
                    "end": "(?=:)",
                    "patterns": [
                        {
                            "include": "#array-literal"
                        }
                    ]
                },
                {
                    "name": "meta.object.member.stne meta.object-literal.key.stne",
                    "begin": "(?=[\\'\\\"])",
                    "end": "(?=:)",
                    "patterns": [
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "name": "meta.object.member.stne",
                    "match": "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=:)",
                    "captures": {
                        "0": {
                            "name": "meta.object-literal.key.stne"
                        },
                        "1": {
                            "name": "constant.numeric.decimal.stne"
                        }
                    }
                },
                {
                    "name": "meta.object.member.stne",
                    "match":
                        "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)))",
                    "captures": {
                        "0": {
                            "name": "meta.object-literal.key.stne"
                        },
                        "1": {
                            "name": "entity.name.function.stne"
                        }
                    }
                },
                {
                    "name": "meta.object.member.stne",
                    "match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
                    "captures": {
                        "0": {
                            "name": "meta.object-literal.key.stne"
                        }
                    }
                },
                {
                    "name": "meta.object.member.stne",
                    "begin": "\\.\\.\\.",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.spread.stne"
                        }
                    },
                    "end": "(?=,|\\})",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "meta.object.member.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$)",
                    "captures": {
                        "1": {
                            "name": "variable.other.readwrite.stne"
                        }
                    }
                },
                {
                    "name": "meta.object.member.stne",
                    "begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
                    "end": "(?=,|\\}|$)",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "meta.object.member.stne",
                    "begin": ":",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.object-literal.key.stne punctuation.separator.key-value.stne"
                        }
                    },
                    "end": "(?=,|\\})",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "ternary-expression": {
            "begin": "(\\?)",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.ternary.stne"
                }
            },
            "end": "(:)",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.ternary.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "function-call": {
            "begin":
                "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`]([^<>]|\\<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`][^<>]+\\>)+>\\s*)?\\()",
            "end":
                "(?<=\\))(?!(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`]([^<>]|\\<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`][^<>]+\\>)+>\\s*)?\\()",
            "patterns": [
                {
                    "name": "meta.function-call.stne",
                    "begin":
                        "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
                    "end":
                        "(?=\\s*(<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`]([^<>]|\\<\\s*[_$[:alpha:]\\{\\(\\[\\\"\\'\\`][^<>]+\\>)+>\\s*)?\\()",
                    "patterns": [
                        {
                            "include": "#literal"
                        },
                        {
                            "include": "#support-objects"
                        },
                        {
                            "include": "#object-identifiers"
                        },
                        {
                            "include": "#punctuation-accessor"
                        },
                        {
                            "name": "keyword.operator.expression.import.stne",
                            "match": "(?![\\.\\$])\\bimport(?=\\s*[\\(]\\s*[\\\"\\'\\`])"
                        },
                        {
                            "name": "entity.name.function.stne",
                            "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                        }
                    ]
                },
                {
                    "include": "#comment"
                },
                {
                    "name": "meta.type.parameters.stne",
                    "begin": "\\<",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.typeparameters.begin.stne"
                        }
                    },
                    "end": "\\>",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.typeparameters.end.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        },
                        {
                            "include": "#punctuation-comma"
                        }
                    ]
                },
                {
                    "include": "#paren-expression"
                }
            ]
        },
        "new-expr": {
            "name": "new.expr.stne",
            "begin": "(?<!\\.|\\$)\\b(new)\\b(?!\\$|\\.)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.new.stne"
                }
            },
            "end":
                "(?<=\\))|(?=[;),}\\]]|$|((?<!\\.|\\$)\\bnew\\b(?!\\$|\\.))|((?<!\\.|\\$)\\bfunction((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
            "patterns": [
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#class-declaration"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "paren-expression": {
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "cast": {
            "patterns": [
                {
                    "include": "#jsx"
                }
            ]
        },
        "expression-operators": {
            "patterns": [
                {
                    "name": "keyword.control.flow.stne",
                    "match": "(?<!\\.|\\$)\\b(await)\\b(?!\\$|\\.)"
                },
                {
                    "match": "(?<!\\.|\\$)\\b(yield)\\b(?!\\$|\\.)(?:\\s*(\\*))?",
                    "captures": {
                        "1": {
                            "name": "keyword.control.flow.stne"
                        },
                        "2": {
                            "name": "keyword.generator.asterisk.stne"
                        }
                    }
                },
                {
                    "name": "keyword.operator.expression.delete.stne",
                    "match": "(?<!\\.|\\$)\\bdelete\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.operator.expression.in.stne",
                    "match": "(?<!\\.|\\$)\\bin\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.operator.expression.of.stne",
                    "match": "(?<!\\.|\\$)\\bof\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.operator.expression.instanceof.stne",
                    "match": "(?<!\\.|\\$)\\binstanceof\\b(?!\\$|\\.)"
                },
                {
                    "name": "keyword.operator.new.stne",
                    "match": "(?<!\\.|\\$)\\bnew\\b(?!\\$|\\.)"
                },
                {
                    "include": "#typeof-operator"
                },
                {
                    "name": "keyword.operator.expression.void.stne",
                    "match": "(?<!\\.|\\$)\\bvoid\\b(?!\\$|\\.)"
                },
                {
                    "begin": "(?<!\\.|\\$)\\b(as)\\s+",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.as.stne"
                        }
                    },
                    "end": "(?=$|^|[;,:})\\]]|((?<!\\.|\\$)\\b(as)\\s+))",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                {
                    "name": "keyword.operator.spread.stne",
                    "match": "\\.\\.\\."
                },
                {
                    "name": "keyword.operator.assignment.compound.stne",
                    "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
                },
                {
                    "name": "keyword.operator.assignment.compound.bitwise.stne",
                    "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
                },
                {
                    "name": "keyword.operator.bitwise.shift.stne",
                    "match": "<<|>>>|>>"
                },
                {
                    "name": "keyword.operator.comparison.stne",
                    "match": "===|!==|==|!="
                },
                {
                    "name": "keyword.operator.relational.stne",
                    "match": "<=|>=|<>|<|>"
                },
                {
                    "name": "keyword.operator.logical.stne",
                    "match": "\\!|&&|\\|\\|"
                },
                {
                    "name": "keyword.operator.bitwise.stne",
                    "match": "\\&|~|\\^|\\|"
                },
                {
                    "name": "keyword.operator.assignment.stne",
                    "match": "\\="
                },
                {
                    "name": "keyword.operator.decrement.stne",
                    "match": "--"
                },
                {
                    "name": "keyword.operator.increment.stne",
                    "match": "\\+\\+"
                },
                {
                    "name": "keyword.operator.arithmetic.stne",
                    "match": "%|\\*|/|-|\\+"
                },
                {
                    "match": "(?<=[_$[:alnum:])])\\s*(/)(?![/*])",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.arithmetic.stne"
                        }
                    }
                }
            ]
        },
        "typeof-operator": {
            "name": "keyword.operator.expression.typeof.stne",
            "match": "(?<!\\.|\\$)\\btypeof\\b(?!\\$|\\.)"
        },
        "literal": {
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#null-literal"
                },
                {
                    "include": "#undefined-literal"
                },
                {
                    "include": "#numericConstant-literal"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "include": "#this-literal"
                },
                {
                    "include": "#super-literal"
                }
            ]
        },
        "array-literal": {
            "name": "meta.array.literal.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.curly.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.curly.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "numeric-literal": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.stne",
                    "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
                },
                {
                    "name": "constant.numeric.binary.stne",
                    "match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
                },
                {
                    "name": "constant.numeric.octal.stne",
                    "match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
                },
                {
                    "match":
                        "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|           # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.stne"
                        },
                        "1": {
                            "name": "meta.delimiter.decimal.period.stne"
                        },
                        "2": {
                            "name": "meta.delimiter.decimal.period.stne"
                        },
                        "3": {
                            "name": "meta.delimiter.decimal.period.stne"
                        },
                        "4": {
                            "name": "meta.delimiter.decimal.period.stne"
                        },
                        "5": {
                            "name": "meta.delimiter.decimal.period.stne"
                        },
                        "6": {
                            "name": "meta.delimiter.decimal.period.stne"
                        }
                    }
                }
            ]
        },
        "boolean-literal": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.stne",
                    "match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
                },
                {
                    "name": "constant.language.boolean.false.stne",
                    "match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
                }
            ]
        },
        "null-literal": {
            "name": "constant.language.null.stne",
            "match": "(?<!\\.|\\$)\\bnull\\b(?!\\$)"
        },
        "this-literal": {
            "name": "variable.language.this.stne",
            "match": "(?<!\\$)((?<=\\.\\.\\.)|(?<!\\.))\\bthis\\b(?!\\$)"
        },
        "super-literal": {
            "name": "variable.language.super.stne",
            "match": "(?<!\\.|\\$)\\bsuper\\b(?!\\$)"
        },
        "undefined-literal": {
            "name": "constant.language.undefined.stne",
            "match": "(?<!\\.|\\$)\\bundefined\\b(?!\\$)"
        },
        "numericConstant-literal": {
            "patterns": [
                {
                    "name": "constant.language.nan.stne",
                    "match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
                },
                {
                    "name": "constant.language.infinity.stne",
                    "match": "(?<!\\.|\\$)\\bInfinity\\b(?!\\$)"
                }
            ]
        },
        "support-objects": {
            "patterns": [
                {
                    "name": "variable.language.arguments.stne",
                    "match": "(?<!\\.|\\$)\\b(arguments)\\b(?!\\$)"
                },
                {
                    "name": "support.class.builtin.stne",
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Float32Array|Float64Array|Function|Generator\n  |GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Promise|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)"
                },
                {
                    "name": "support.class.error.stne",
                    "match":
                        "(?<!\\.|\\$)\\b((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)"
                },
                {
                    "name": "support.function.stne",
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()"
                },
                {
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(Math)(?:\\s*(\\.)\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.constant.math.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        },
                        "3": {
                            "name": "support.function.math.stne"
                        },
                        "4": {
                            "name": "support.constant.property.math.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(console)(?:\\s*(\\.)\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.class.console.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        },
                        "3": {
                            "name": "support.function.console.stne"
                        }
                    }
                },
                {
                    "match": "(?<!\\.|\\$)\\b(JSON)(?:\\s*(\\.)\\s*(parse|stringify))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.constant.stneon.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        },
                        "3": {
                            "name": "support.function.stneon.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?x) (\\.) \\s* (?:\n  (constructor|length|prototype|__proto__)\n  |\n  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY))\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "support.variable.property.stne"
                        },
                        "3": {
                            "name": "support.constant.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?x) (?<!\\.|\\$) \\b (?:\n  (document|event|navigator|performance|screen|window)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.variable.dom.stne"
                        },
                        "2": {
                            "name": "support.class.dom.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?x) (\\.) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?\\()",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "support.constant.dom.stne"
                        },
                        "3": {
                            "name": "support.variable.property.dom.stne"
                        }
                    }
                },
                {
                    "name": "support.class.node.stne",
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)"
                },
                {
                    "match":
                        "(?x)(?<!\\.|\\$)\\b(process)(?:(\\.)(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.variable.object.process.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        },
                        "3": {
                            "name": "support.variable.property.process.stne"
                        },
                        "4": {
                            "name": "support.function.process.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?<!\\.|\\$)\\b(?:(exports)|(module)(?:(\\.)(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.type.object.module.stne"
                        },
                        "2": {
                            "name": "support.type.object.module.stne"
                        },
                        "3": {
                            "name": "punctuation.accessor.stne"
                        },
                        "4": {
                            "name": "support.type.object.module.stne"
                        }
                    }
                },
                {
                    "name": "support.variable.object.node.stne",
                    "match": "(?<!\\.|\\$)\\b(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)"
                },
                {
                    "match":
                        "(?x) (\\.) \\s*\n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n )\n)(?=\\s*\\()",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "support.function.event-handler.stne"
                        },
                        "3": {
                            "name": "support.function.stne"
                        },
                        "4": {
                            "name": "support.function.dom.stne"
                        }
                    }
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "include": "#object-identifiers"
                },
                {
                    "match":
                        "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*[_$[:alpha:]\\{\\(\\[]([^<>=]|=[^<]|\\<\\s*[_$[:alpha:]\\{\\(\\[]([^=<>]|=[^<])+\\>)+>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n))",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "entity.name.function.stne"
                        }
                    }
                },
                {
                    "match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "variable.other.constant.property.stne"
                        }
                    }
                },
                {
                    "match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "variable.other.property.stne"
                        }
                    }
                },
                {
                    "name": "variable.other.constant.stne",
                    "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
                },
                {
                    "name": "variable.other.readwrite.stne",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                }
            ]
        },
        "object-identifiers": {
            "patterns": [
                {
                    "name": "support.class.stne",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
                },
                {
                    "match":
                        "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.stne"
                        },
                        "2": {
                            "name": "variable.other.constant.object.property.stne"
                        },
                        "3": {
                            "name": "variable.other.object.property.stne"
                        }
                    }
                },
                {
                    "match":
                        "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "variable.other.constant.object.stne"
                        },
                        "2": {
                            "name": "variable.other.object.stne"
                        }
                    }
                }
            ]
        },
        "type-annotation": {
            "patterns": [
                {
                    "name": "meta.type.annotation.stne",
                    "begin": "(:)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end":
                        "(?<![:|&])((?=$|^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                {
                    "name": "meta.type.annotation.stne",
                    "begin": "(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end":
                        "(?<![:|&])((?=[,);\\}\\]]|//)|(?==[^>])|(?=^\\s*$)|((?<=\\S)(?=\\s*$))|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "return-type": {
            "patterns": [
                {
                    "name": "meta.return.type.stne",
                    "begin": "(?<=\\))\\s*(:)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end": "(?<![:|&])(?=$|^|[{};,]|//)",
                    "patterns": [
                        {
                            "include": "#return-type-core"
                        }
                    ]
                },
                {
                    "name": "meta.return.type.stne",
                    "begin": "(?<=\\))\\s*(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.type.annotation.stne"
                        }
                    },
                    "end": "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
                    "patterns": [
                        {
                            "include": "#return-type-core"
                        }
                    ]
                }
            ]
        },
        "return-type-core": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin": "(?<=[:|&])(?=\\s*\\{)",
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "include": "#type-predicate-operator"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "arrow-return-type": {
            "name": "meta.return.type.arrow.stne",
            "begin": "(?<=\\))\\s*(:)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.type.annotation.stne"
                }
            },
            "end":
                "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
            "patterns": [
                {
                    "begin": "(?<=[:])(?=\\s*\\{)",
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "include": "#type-predicate-operator"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "type-parameters": {
            "name": "meta.type.parameters.stne",
            "begin": "(<)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.typeparameters.begin.stne"
                }
            },
            "end": "(>)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.typeparameters.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "name": "storage.modifier.stne",
                    "match": "(?<!\\.|\\$)\\b(extends)\\b(?!\\$)"
                },
                {
                    "name": "keyword.operator.assignment.stne",
                    "match": "\\=(?!>)"
                },
                {
                    "include": "#type"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "type": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#type-primitive"
                },
                {
                    "include": "#type-builtin-literals"
                },
                {
                    "include": "#type-parameters"
                },
                {
                    "include": "#type-tuple"
                },
                {
                    "include": "#type-object"
                },
                {
                    "include": "#type-operators"
                },
                {
                    "include": "#type-fn-type-parameters"
                },
                {
                    "include": "#type-paren-or-function-parameters"
                },
                {
                    "include": "#type-function-return-type"
                },
                {
                    "include": "#type-name"
                }
            ]
        },
        "type-primitive": {
            "name": "support.type.primitive.stne",
            "match": "(?<!\\.|\\$)\\b(string|number|boolean|symbol|any|void|never)\\b(?!\\$|\\.)"
        },
        "type-builtin-literals": {
            "name": "support.type.builtin.stne",
            "match": "(?<!\\.|\\$)\\b(this|true|false|undefined|null|object)\\b(?!\\$|\\.)"
        },
        "type-tuple": {
            "name": "meta.type.tuple.stne",
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.square.stne"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.square.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "type-object": {
            "name": "meta.object.type.stne",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.stne"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#method-declaration"
                },
                {
                    "include": "#indexer-declaration"
                },
                {
                    "include": "#indexer-mapped-type-declaration"
                },
                {
                    "include": "#field-declaration"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "begin": "\\.\\.\\.",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.spread.stne"
                        }
                    },
                    "end": "(?=\\}|;|,|$)|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-semicolon"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "type-paren-or-function-parameters": {
            "name": "meta.type.paren.cover.stne",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.stne"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                },
                {
                    "include": "#function-parameters"
                }
            ]
        },
        "type-fn-type-parameters": {
            "patterns": [
                {
                    "name": "meta.type.constructor.stne",
                    "match": "(?<!\\.|\\$)\\b(new)\\b(?=\\s*\\<)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.new.stne"
                        }
                    }
                },
                {
                    "name": "meta.type.constructor.stne",
                    "begin": "(?<!\\.|\\$)\\b(new)\\b\\s*(?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.new.stne"
                        }
                    },
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "include": "#function-parameters"
                        }
                    ]
                },
                {
                    "name": "meta.type.function.stne",
                    "begin":
                        "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )\n  )\n)",
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "include": "#function-parameters"
                        }
                    ]
                }
            ]
        },
        "type-function-return-type": {
            "patterns": [
                {
                    "name": "meta.type.function.return.stne",
                    "begin": "(=>)(?=\\s*\\S)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.function.arrow.stne"
                        }
                    },
                    "end": "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>]|//|$)",
                    "patterns": [
                        {
                            "include": "#type-function-return-type-core"
                        }
                    ]
                },
                {
                    "name": "meta.type.function.return.stne",
                    "begin": "=>",
                    "beginCaptures": {
                        "0": {
                            "name": "storage.type.function.arrow.stne"
                        }
                    },
                    "end": "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
                    "patterns": [
                        {
                            "include": "#type-function-return-type-core"
                        }
                    ]
                }
            ]
        },
        "type-function-return-type-core": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "begin": "(?<==>)(?=\\s*\\{)",
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "include": "#type-predicate-operator"
                },
                {
                    "include": "#type"
                }
            ]
        },
        "type-operators": {
            "patterns": [
                {
                    "include": "#typeof-operator"
                },
                {
                    "begin": "([&|])(?=\\s*\\{)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.type.stne"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#type-object"
                        }
                    ]
                },
                {
                    "begin": "[&|]",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.type.stne"
                        }
                    },
                    "end": "(?=\\S)"
                },
                {
                    "name": "keyword.operator.expression.keyof.stne",
                    "match": "(?<!\\.|\\$)\\bkeyof\\b(?!\\$|\\.)"
                }
            ]
        },
        "type-predicate-operator": {
            "name": "keyword.operator.expression.is.stne",
            "match": "(?<!\\.|\\$)\\bis\\b(?!\\$|\\.)"
        },
        "type-name": {
            "patterns": [
                {
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.module.stne"
                        },
                        "2": {
                            "name": "punctuation.accessor.stne"
                        }
                    }
                },
                {
                    "name": "entity.name.type.stne",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                }
            ]
        },
        "punctuation-comma": {
            "name": "punctuation.separator.comma.stne",
            "match": ","
        },
        "punctuation-semicolon": {
            "name": "punctuation.terminator.statement.stne",
            "match": ";"
        },
        "punctuation-accessor": {
            "name": "punctuation.accessor.stne",
            "match": "\\."
        },
        "string": {
            "patterns": [
                {
                    "include": "#qstring-single"
                },
                {
                    "include": "#qstring-double"
                }
            ]
        },
        "qstring-double": {
            "name": "string.quoted.double.stne",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.stne"
                }
            },
            "end": "(\")|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.stne"
                },
                "2": {
                    "name": "invalid.illegal.newline.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "qstring-single": {
            "name": "string.quoted.single.stne",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.stne"
                }
            },
            "end": "(\\')|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.stne"
                },
                "2": {
                    "name": "invalid.illegal.newline.stne"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "string-character-escape": {
            "name": "constant.character.escape.stne",
            "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
        },
        "template": {
            "name": "string.template.stne",
            "begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.tagged-template.stne"
                },
                "2": {
                    "name": "punctuation.definition.string.template.begin.stne"
                }
            },
            "end": "`",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.template.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#template-substitution-element"
                },
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "template-substitution-element": {
            "name": "meta.template.expression.stne",
            "begin": "\\$\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.template-expression.begin.stne"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.template-expression.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ],
            "contentName": "meta.embedded.line.stne"
        },
        "regex": {
            "patterns": [
                {
                    "name": "string.regexp.stne",
                    "begin":
                        "(?<=[=(:,\\[?+!]|return|case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimuy]*(?!\\s*[a-zA-Z0-9_$]))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.stne"
                        }
                    },
                    "end": "(/)([gimuy]*)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.stne"
                        },
                        "2": {
                            "name": "keyword.other.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regexp"
                        }
                    ]
                },
                {
                    "name": "string.regexp.stne",
                    "begin":
                        "(?<![_$[:alnum:])])\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimuy]*(?!\\s*[a-zA-Z0-9_$]))",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.stne"
                        }
                    },
                    "end": "(/)([gimuy]*)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.stne"
                        },
                        "2": {
                            "name": "keyword.other.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regexp"
                        }
                    ]
                }
            ]
        },
        "regexp": {
            "patterns": [
                {
                    "name": "keyword.control.anchor.regexp",
                    "match": "\\\\[bB]|\\^|\\$"
                },
                {
                    "name": "keyword.other.back-reference.regexp",
                    "match": "\\\\[1-9]\\d*"
                },
                {
                    "name": "keyword.operator.quantifier.regexp",
                    "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
                },
                {
                    "name": "keyword.operator.or.regexp",
                    "match": "\\|"
                },
                {
                    "name": "meta.group.assertion.regexp",
                    "begin": "(\\()((\\?=)|(\\?!))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        },
                        "2": {
                            "name": "punctuation.definition.group.assertion.regexp"
                        },
                        "3": {
                            "name": "meta.assertion.look-ahead.regexp"
                        },
                        "4": {
                            "name": "meta.assertion.negative-look-ahead.regexp"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regexp"
                        }
                    ]
                },
                {
                    "name": "meta.group.regexp",
                    "begin": "\\((\\?:)?",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        },
                        "1": {
                            "name": "punctuation.definition.group.no-capture.regexp"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regexp"
                        }
                    ]
                },
                {
                    "name": "constant.other.character-class.set.regexp",
                    "begin": "(\\[)(\\^)?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        },
                        "2": {
                            "name": "keyword.operator.negation.regexp"
                        }
                    },
                    "end": "(\\])",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.other.character-class.range.regexp",
                            "match":
                                "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
                            "captures": {
                                "1": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "2": {
                                    "name": "constant.character.control.regexp"
                                },
                                "3": {
                                    "name": "constant.character.escape.backslash.regexp"
                                },
                                "4": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "5": {
                                    "name": "constant.character.control.regexp"
                                },
                                "6": {
                                    "name": "constant.character.escape.backslash.regexp"
                                }
                            }
                        },
                        {
                            "include": "#regex-character-class"
                        }
                    ]
                },
                {
                    "include": "#regex-character-class"
                }
            ]
        },
        "regex-character-class": {
            "patterns": [
                {
                    "name": "constant.other.character-class.regexp",
                    "match": "\\\\[wWsSdDtrnvf]|\\."
                },
                {
                    "name": "constant.character.numeric.regexp",
                    "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
                },
                {
                    "name": "constant.character.control.regexp",
                    "match": "\\\\c[A-Z]"
                },
                {
                    "name": "constant.character.escape.backslash.regexp",
                    "match": "\\\\."
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.documentation.stne",
                    "begin": "/\\*\\*(?!/)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.stne"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.stne"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#docblock"
                        }
                    ]
                },
                {
                    "name": "comment.block.stne",
                    "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.stne"
                        },
                        "2": {
                            "name": "storage.type.internaldeclaration.stne"
                        },
                        "3": {
                            "name": "punctuation.decorator.internaldeclaration.stne"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.stne"
                        }
                    }
                },
                {
                    "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.stne"
                        },
                        "2": {
                            "name": "comment.line.double-slash.stne"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.stne"
                        },
                        "4": {
                            "name": "storage.type.internaldeclaration.stne"
                        },
                        "5": {
                            "name": "punctuation.decorator.internaldeclaration.stne"
                        }
                    },
                    "end": "(?=^)",
                    "contentName": "comment.line.double-slash.stne"
                }
            ]
        },
        "directives": {
            "name": "comment.line.triple-slash.directive.stne",
            "begin":
                "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|name)\\s*=\\s*((\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")))+\\s*/>\\s*$)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.stne"
                }
            },
            "end": "(?=^)",
            "patterns": [
                {
                    "name": "meta.tag.stne",
                    "begin": "(<)(reference|amd-dependency|amd-module)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.directive.stne"
                        },
                        "2": {
                            "name": "entity.name.tag.directive.stne"
                        }
                    },
                    "end": "/>",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.directive.stne"
                        }
                    },
                    "patterns": [
                        {
                            "name": "entity.other.attribute-name.directive.stne",
                            "match": "path|types|no-default-lib|name"
                        },
                        {
                            "name": "keyword.operator.assignment.stne",
                            "match": "="
                        },
                        {
                            "include": "#string"
                        }
                    ]
                }
            ]
        },
        "docblock": {
            "patterns": [
                {
                    "match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "constant.language.access-type.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "4": {
                            "name": "punctuation.definition.bracket.angle.begin.stnedoc"
                        },
                        "5": {
                            "name": "constant.other.email.link.underline.stnedoc"
                        },
                        "6": {
                            "name": "punctuation.definition.bracket.angle.end.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "4": {
                            "name": "keyword.operator.control.stnedoc"
                        },
                        "5": {
                            "name": "entity.name.type.instance.stnedoc"
                        }
                    }
                },
                {
                    "name": "meta.example.stnedoc",
                    "begin": "((@)example)\\s+",
                    "end": "(?=@|\\*/)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "patterns": [
                        {
                            "match": "^\\s\\*\\s+"
                        },
                        {
                            "contentName": "constant.other.description.stnedoc",
                            "begin": "\\G(<)caption(>)",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.stnedoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.stnedoc"
                                }
                            },
                            "end": "(</)caption(>)|(?=\\*/)",
                            "endCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.stnedoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.stnedoc"
                                }
                            }
                        },
                        {
                            "match": "[^\\s@*](?:[^*]|\\*[^/])*",
                            "captures": {
                                "0": {
                                    "name": "source.embedded.stne"
                                }
                            }
                        }
                    ]
                },
                {
                    "match":
                        "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "constant.language.symbol-type.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.link.underline.stnedoc"
                        },
                        "4": {
                            "name": "entity.name.type.instance.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        }
                    }
                },
                {
                    "begin": "((@)typedef)\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "entity.name.type.instance.stnedoc",
                            "match": "(?:[^@\\s*/]|\\*[^/])+"
                        }
                    ]
                },
                {
                    "begin":
                        "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "variable.other.stnedoc",
                            "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
                        },
                        {
                            "name": "variable.other.stnedoc",
                            "match":
                                "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
                            "captures": {
                                "1": {
                                    "name":
                                        "punctuation.definition.optional-value.begin.bracket.square.stnedoc"
                                },
                                "2": {
                                    "name": "keyword.operator.assignment.stnedoc"
                                },
                                "3": {
                                    "name": "source.embedded.stne"
                                },
                                "4": {
                                    "name":
                                        "punctuation.definition.optional-value.end.bracket.square.stnedoc"
                                },
                                "5": {
                                    "name": "invalid.illegal.syntax.stnedoc"
                                }
                            }
                        }
                    ]
                },
                {
                    "begin":
                        "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        }
                    ]
                },
                {
                    "match":
                        "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.stnedoc"
                        }
                    }
                },
                {
                    "contentName": "variable.other.stnedoc",
                    "begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        },
                        "4": {
                            "name": "punctuation.definition.string.begin.stnedoc"
                        }
                    },
                    "end": "(\\3)|(?=$|\\*/)",
                    "endCaptures": {
                        "0": {
                            "name": "variable.other.stnedoc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.end.stnedoc"
                        }
                    }
                },
                {
                    "match":
                        "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        },
                        "3": {
                            "name": "variable.other.stnedoc"
                        }
                    }
                },
                {
                    "name": "storage.type.class.stnedoc",
                    "match":
                        "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.block.tag.stnedoc"
                        }
                    }
                },
                {
                    "include": "#inline-tags"
                }
            ]
        },
        "brackets": {
            "patterns": [
                {
                    "begin": "{",
                    "end": "}|(?=\\*/)",
                    "patterns": [
                        {
                            "include": "#brackets"
                        }
                    ]
                },
                {
                    "begin": "\\[",
                    "end": "\\]|(?=\\*/)",
                    "patterns": [
                        {
                            "include": "#brackets"
                        }
                    ]
                }
            ]
        },
        "inline-tags": {
            "patterns": [
                {
                    "name": "constant.other.description.stnedoc",
                    "match": "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.bracket.square.begin.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.bracket.square.end.stnedoc"
                        }
                    }
                },
                {
                    "name": "entity.name.type.instance.stnedoc",
                    "begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.bracket.curly.begin.stnedoc"
                        },
                        "2": {
                            "name": "storage.type.class.stnedoc"
                        },
                        "3": {
                            "name": "punctuation.definition.inline.tag.stnedoc"
                        }
                    },
                    "end": "}|(?=\\*/)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.bracket.curly.end.stnedoc"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?",
                            "captures": {
                                "1": {
                                    "name": "variable.other.link.underline.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.separator.pipe.stnedoc"
                                }
                            }
                        },
                        {
                            "match": "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?",
                            "captures": {
                                "1": {
                                    "name": "variable.other.description.stnedoc"
                                },
                                "2": {
                                    "name": "punctuation.separator.pipe.stnedoc"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "jsdoctype": {
            "patterns": [
                {
                    "name": "invalid.illegal.type.stnedoc",
                    "match": "\\G{(?:[^}*]|\\*[^/}])+$"
                },
                {
                    "contentName": "entity.name.type.instance.stnedoc",
                    "begin": "\\G({)",
                    "beginCaptures": {
                        "0": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "1": {
                            "name": "punctuation.definition.bracket.curly.begin.stnedoc"
                        }
                    },
                    "end": "((}))\\s*|(?=\\*/)",
                    "endCaptures": {
                        "1": {
                            "name": "entity.name.type.instance.stnedoc"
                        },
                        "2": {
                            "name": "punctuation.definition.bracket.curly.end.stnedoc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#brackets"
                        }
                    ]
                }
            ]
        },
        "jsx": {
            "patterns": [
                {
                    "include": "#jsx-tag-without-attributes-in-expression"
                },
                {
                    "include": "#jsx-tag-in-expression"
                }
            ]
        },
        "jsx-tag-without-attributes-in-expression": {
            "begin":
                "(?x)\n  (?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\Wreturn|^return|\\Wdefault|^)\\s*\n  (?=(<)\\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>))",
            "end": "(?!\\s*(<)\\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>))",
            "patterns": [
                {
                    "include": "#jsx-tag-without-attributes"
                }
            ]
        },
        "jsx-tag-without-attributes": {
            "name": "meta.tag.without-attributes.stne",
            "begin": "(<)\\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>)",
            "end": "(</)\\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.tag.begin.stne"
                },
                "2": {
                    "name": "entity.name.tag.stne"
                },
                "3": {
                    "name": "support.class.component.stne"
                },
                "4": {
                    "name": "punctuation.definition.tag.end.stne"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.tag.begin.stne"
                },
                "2": {
                    "name": "entity.name.tag.stne"
                },
                "3": {
                    "name": "support.class.component.stne"
                },
                "4": {
                    "name": "punctuation.definition.tag.end.stne"
                }
            },
            "contentName": "meta.stnex.children.stne",
            "patterns": [
                {
                    "include": "#jsx-children"
                }
            ]
        },
        "jsx-tag-in-expression": {
            "begin":
                "(?x)\n  (?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\Wreturn|^return|\\Wdefault|^)\\s*\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>))",
            "end": "(/>)|(?:(</)\\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))\\s*(>))",
            "endCaptures": {
                "0": {
                    "name": "meta.tag.stne"
                },
                "1": {
                    "name": "punctuation.definition.tag.end.stne"
                },
                "2": {
                    "name": "punctuation.definition.tag.begin.stne"
                },
                "3": {
                    "name": "entity.name.tag.stne"
                },
                "4": {
                    "name": "support.class.component.stne"
                },
                "5": {
                    "name": "punctuation.definition.tag.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#jsx-tag"
                }
            ]
        },
        "jsx-child-tag": {
            "begin":
                "(?x)\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>))",
            "end": "(/>)|(?:(</)\\s*((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))\\s*(>))",
            "endCaptures": {
                "0": {
                    "name": "meta.tag.stne"
                },
                "1": {
                    "name": "punctuation.definition.tag.end.stne"
                },
                "2": {
                    "name": "punctuation.definition.tag.begin.stne"
                },
                "3": {
                    "name": "entity.name.tag.stne"
                },
                "4": {
                    "name": "support.class.component.stne"
                },
                "5": {
                    "name": "punctuation.definition.tag.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#jsx-tag"
                }
            ]
        },
        "jsx-tag": {
            "name": "meta.tag.stne",
            "begin":
                "(?x)\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>))",
            "end": "(?=(/>)|(?:(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)))",
            "patterns": [
                {
                    "begin":
                        "(?x)\n  (<)\\s*\n  ((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.stne"
                        },
                        "2": {
                            "name": "entity.name.tag.stne"
                        },
                        "3": {
                            "name": "support.class.component.stne"
                        }
                    },
                    "end": "(?=[/]?>)",
                    "contentName": "meta.tag.attributes.stne",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#jsx-tag-attributes"
                        },
                        {
                            "include": "#jsx-tag-attributes-illegal"
                        }
                    ]
                },
                {
                    "begin": "(>)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.stne"
                        }
                    },
                    "end": "(?=</)",
                    "contentName": "meta.stnex.children.stne",
                    "patterns": [
                        {
                            "include": "#jsx-children"
                        }
                    ]
                }
            ]
        },
        "jsx-children": {
            "patterns": [
                {
                    "include": "#jsx-tag-without-attributes"
                },
                {
                    "include": "#jsx-child-tag"
                },
                {
                    "include": "#jsx-evaluated-code"
                },
                {
                    "include": "#jsx-entities"
                }
            ]
        },
        "jsx-evaluated-code": {
            "name": "meta.embedded.expression.stne",
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.embedded.begin.stne"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.embedded.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "jsx-entities": {
            "patterns": [
                {
                    "name": "constant.character.entity.stne",
                    "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.stne"
                        },
                        "3": {
                            "name": "punctuation.definition.entity.stne"
                        }
                    }
                },
                {
                    "name": "invalid.illegal.bad-ampersand.stne",
                    "match": "&"
                }
            ]
        },
        "jsx-tag-attributes": {
            "patterns": [
                {
                    "include": "#jsx-tag-attribute-name"
                },
                {
                    "include": "#jsx-tag-attribute-assignment"
                },
                {
                    "include": "#jsx-string-double-quoted"
                },
                {
                    "include": "#jsx-string-single-quoted"
                },
                {
                    "include": "#jsx-evaluated-code"
                }
            ]
        },
        "jsx-tag-attribute-name": {
            "match": "(?x)\n  \\s*\n  ([_$a-zA-Z][-$\\w]*)\n  (?=\\s|=|/?>|/\\*|//)",
            "captures": {
                "1": {
                    "name": "entity.other.attribute-name.stne"
                }
            }
        },
        "jsx-tag-attribute-assignment": {
            "name": "keyword.operator.assignment.stne",
            "match": "=(?=\\s*(?:'|\"|{|/\\*|//|\\n))"
        },
        "jsx-string-double-quoted": {
            "name": "string.quoted.double.stne",
            "begin": "\"",
            "end": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.stne"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#jsx-entities"
                }
            ]
        },
        "jsx-string-single-quoted": {
            "name": "string.quoted.single.stne",
            "begin": "'",
            "end": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.stne"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.stne"
                }
            },
            "patterns": [
                {
                    "include": "#jsx-entities"
                }
            ]
        },
        "jsx-tag-attributes-illegal": {
            "name": "invalid.illegal.attribute.stne",
            "match": "\\S+"
        }
    }
}